{"version":3,"sources":["webpack://battleship/./src/helpers/getRandomCoordinate.js","webpack://battleship/./src/factories/Player.js","webpack://battleship/./src/factories/Gameboard.js","webpack://battleship/./src/factories/Ship.js","webpack://battleship/./src/game.js","webpack://battleship/./src/index.js"],"names":["getRandomCoordinate","min","max","Math","ceil","floor","random","type","attacks","attack","enemy","num","receiveAttack","computerAttack","includes","push","board","Array","fill","shipType","name","length","fleet","sunkenShips","grid","from","v","i","gridSections","rightHalf","leftHalf","splitGrid","size","slice","getAllLeftHalfNums","flat","getAllRightHalfNums","shuffleLeftHalf","j","temp","checkForVerticalRestrictions","assignShipLocation","initialPosition","direction","shipLocation","checkForOverlap","arr","location","ship","indexOf","renderBoard","createFleet","forEach","hits","newShip","hit","isSunk","placeShip","coords","checkAllSunk","Game","winner","playerOne","Player","playerTwo","human","Gameboard","computer","boardNameOne","document","getElementById","boardNameTwo","playerOneBoard","querySelector","playerTwoBoard","humanBoard","computerBoard","announcement","playerOneSunken","playerTwoSunken","resetButton","addShipsToBoard","boardArr","player","renderGameBoard","boardOwner","innerText","textContent","square","createElement","id","classList","add","append","squares","querySelectorAll","play","e","Number","target","matches","removeEventListener","announceSunkenShip","compTarget","findWinner","join","endGame","style","display","addEventListener","replaceChildren","startButton"],"mappings":"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","file":"main.js","sourcesContent":["export default function getRandomCoordinate(min, max) {\n  min = Math.ceil(min);\n  max = Math.floor(max);\n  return Math.floor(Math.random() * (max - min + 1) + min);\n}\n","import getRandomCoordinate from '../helpers/getRandomCoordinate';\n\nconst Player = (type) => {\n  const attacks = [];\n  const attack = (enemy, num) => {\n    enemy.receiveAttack(num);\n  };\n  const computerAttack = (enemy) => {\n    let num = getRandomCoordinate(0, 99);\n    while (attacks.includes(num)) {\n      num = getRandomCoordinate(0, 99);\n    }\n    if (!attacks.includes(num)) {\n      enemy.receiveAttack(num);\n      attacks.push(num);\n    }\n    return num;\n  };\n  return { type, attacks, attack, computerAttack };\n};\n\nexport default Player;\n","import Ship from '../factories/Ship';\nimport getRandomCoordinate from '../helpers/getRandomCoordinate';\n\nconst Gameboard = () => {\n  let board = Array(100).fill('');\n  let shipType = [\n    { name: 'Patrol Boat', length: 2 },\n    { name: 'Submarine', length: 3 },\n    { name: 'Destroyer', length: 3 },\n    { name: 'Battleship', length: 4 },\n    { name: 'Carrier', length: 5 },\n  ];\n  let fleet = [];\n  let sunkenShips = [];\n\n  const renderBoard = () => {\n    return board;\n  };\n  const createFleet = () => {\n    shipType.forEach((ship) => {\n      let newShip = Ship(ship.name, ship.length);\n      fleet.push(newShip);\n    });\n    return fleet;\n  };\n  //split grid into coordinate groups to help with validation\n  let grid = Array.from({ length: 100 }, (v, i) => i);\n  let gridSections = [];\n  let rightHalf = [];\n  let leftHalf = [];\n  const splitGrid = (size) => {\n    for (let i = 0; i < grid.length; i += size) {\n      gridSections.push(grid.slice(i, i + size));\n    }\n    gridSections = gridSections.slice(0, 20);\n    return gridSections;\n  };\n  splitGrid(5);\n\n  const getAllLeftHalfNums = () => {\n    for (let i = 0; i < gridSections.length; i += 2) {\n      if (leftHalf.length < 10) {\n        leftHalf.push(gridSections[i]);\n      }\n    }\n    leftHalf = leftHalf.flat();\n    return leftHalf;\n  };\n  const getAllRightHalfNums = () => {\n    for (let i = 1; i < gridSections.length; i += 2) {\n      if (rightHalf.length < 10) {\n        rightHalf.push(gridSections[i]);\n      }\n    }\n    rightHalf = rightHalf.flat();\n    return rightHalf;\n  };\n  getAllLeftHalfNums();\n  getAllRightHalfNums();\n\n  const shuffleLeftHalf = () => {\n    let num;\n    for (let i = leftHalf.length - 1; i > 0; i--) {\n      let j = Math.floor(Math.random() * (i + 1));\n      let temp = leftHalf[i];\n      leftHalf[i] = leftHalf[j];\n      leftHalf[j] = temp;\n      num = leftHalf[j];\n    }\n    return num;\n  };\n\n  //prevent vertical ships from going off board\n  const checkForVerticalRestrictions = (length, num) => {\n    if (length === 5 && num >= 60) {\n      num = getRandomCoordinate(0, 59);\n    } else if (length === 4 && num >= 70) {\n      num = getRandomCoordinate(0, 69);\n    } else if (length === 3 && num >= 80) {\n      num = getRandomCoordinate(0, 79);\n    } else if (length === 2 && num >= 90) {\n      num = getRandomCoordinate(0, 89);\n    }\n    return num;\n  };\n  const assignShipLocation = (length) => {\n    const directions = ['horizontal', 'vertical'];\n    let direction = directions[getRandomCoordinate(0, 1)];\n    let initialPosition;\n    let shipLocation = [];\n    if (direction === 'horizontal') {\n      //prevent horizontal ships from going off board\n      initialPosition = shuffleLeftHalf();\n    } else {\n      initialPosition = getRandomCoordinate(0, 89);\n      checkForVerticalRestrictions(length, initialPosition);\n    }\n    for (let i = 0; i < length; i++) {\n      if (direction === 'horizontal') {\n        shipLocation.push(initialPosition++);\n      } else {\n        shipLocation.push((initialPosition += 10));\n      }\n    }\n    return [direction, shipLocation];\n  };\n  const checkForOverlap = (arr, location) => {\n    for (let i = 0; i < arr.length; i++) {\n      let ship = arr[i];\n      for (let j = 0; j < location.length; j++) {\n        if (ship.location.indexOf(location[j]) >= 0 || location[j] > 99) {\n          return true;\n        }\n      }\n    }\n    return false;\n  };\n  const placeShip = () => {\n    let temp;\n    for (let ship of fleet) {\n      do {\n        temp = assignShipLocation(ship.length);\n      } while (checkForOverlap(fleet, temp[1]));\n      {\n        ship.direction = temp[0];\n        ship.location = temp[1];\n      }\n    }\n    return fleet;\n  };\n  const receiveAttack = (coords) => {\n    for (let ship of fleet) {\n      if (ship.location.indexOf(coords) >= 0) {\n        ship.hit(coords);\n        if (ship.isSunk()) {\n          sunkenShips.push(ship.name);\n        }\n        return true;\n      }\n    }\n    return false;\n  };\n  const checkAllSunk = () => {\n    if (sunkenShips.length === fleet.length) {\n      return true;\n    }\n    return false;\n  };\n  return {\n    board,\n    fleet,\n    sunkenShips,\n    grid,\n    gridSections,\n    leftHalf,\n    rightHalf,\n    renderBoard,\n    createFleet,\n    splitGrid,\n    getAllLeftHalfNums,\n    getAllRightHalfNums,\n    shuffleLeftHalf,\n    checkForVerticalRestrictions,\n    assignShipLocation,\n    checkForOverlap,\n    placeShip,\n    receiveAttack,\n    checkAllSunk,\n  };\n};\n\nexport default Gameboard;\n","const Ship = (name, length) => {\n  let direction;\n  let location = [];\n  let hits = [];\n  const hit = (num) => {\n    hits.push(num);\n    return hits;\n  };\n  const isSunk = () => {\n    if (hits.length === length) {\n      return true;\n    }\n    return false;\n  };\n  return { name, length, direction, location, hits, hit, isSunk };\n};\n\nexport default Ship;\n","import Player from './factories/Player';\nimport Gameboard from './factories/Gameboard';\n\nconst Game = () => {\n  const playerOne = Player('human');\n  const playerTwo = Player('computer');\n  const human = Gameboard();\n  const computer = Gameboard();\n  const boardNameOne = document.getElementById('playerOne');\n  const boardNameTwo = document.getElementById('playerTwo');\n  const playerOneBoard = document.querySelector('.human-board');\n  const playerTwoBoard = document.querySelector('.computer-board');\n  const humanBoard = human.board;\n  const computerBoard = computer.board;\n  const announcement = document.querySelector('.announcement');\n  const playerOneSunken = document.getElementById('playerOneSunken');\n  const playerTwoSunken = document.getElementById('playerTwoSunken');\n  const resetButton = document.querySelector('.reset');\n  let winner;\n\n  human.createFleet();\n  human.placeShip();\n  computer.createFleet();\n  computer.placeShip();\n\n  const addShipsToBoard = (boardArr, player) => {\n    for (let i = 0; i < boardArr.length; i++) {\n      for (let ship of player.fleet) {\n        for (let j = 0; j < ship.location.length; j++) {\n          if (i === ship.location[j]) {\n            boardArr[i] = ship.location[j];\n          }\n        }\n      }\n    }\n    return boardArr;\n  };\n  addShipsToBoard(humanBoard, human);\n  addShipsToBoard(computerBoard, computer);\n\n  const renderGameBoard = (boardArr, boardOwner) => {\n    if (boardArr === humanBoard) {\n      boardNameOne.innerText = 'Your Board';\n      playerOneSunken.textContent = `Sunken ships:`;\n    } else {\n      boardNameTwo.innerText = 'Enemy Board';\n      playerTwoSunken.textContent = `Sunken ships:`;\n    }\n    for (let i = 0; i < boardArr.length; i++) {\n      let square = document.createElement('div');\n      square.id = i;\n      if (boardArr === humanBoard && boardArr[i] === '') {\n        square.classList.add('empty');\n      } else if (boardArr === computerBoard && boardArr[i] !== '') {\n        square.classList.add('hidden');\n        square.classList.add('square');\n      } else if (boardArr === computerBoard && boardArr[i] === '') {\n        square.classList.add('empty');\n        square.classList.add('square');\n      } else {\n        square.classList.add('occupied');\n      }\n      boardOwner.append(square);\n    }\n  };\n  renderGameBoard(humanBoard, playerOneBoard);\n  renderGameBoard(computerBoard, playerTwoBoard);\n\n  const squares = document.querySelectorAll('.square');\n\n  const play = (e) => {\n    playerOne.attack(computer, Number(e.target.id));\n    if (!e.target.matches('.hidden')) {\n      e.target.innerText = 'X';\n    } else {\n      e.target.classList.add('hit');\n    }\n    e.target.removeEventListener('click', play);\n    announceSunkenShip(computer.sunkenShips);\n    let compTarget = document.getElementById(\n      `${playerTwo.computerAttack(human)}`\n    );\n    if (!compTarget.matches('.occupied')) {\n      compTarget.innerText = 'X';\n    } else {\n      compTarget.classList.add('hit');\n    }\n    announceSunkenShip(human.sunkenShips);\n    findWinner();\n  };\n  const announceSunkenShip = (sunkenShips) => {\n    if (sunkenShips === human.sunkenShips) {\n      playerOneSunken.textContent = `Sunken ships: ${human.sunkenShips.join(\n        ', '\n      )}`;\n    } else {\n      playerTwoSunken.textContent = `Sunken ships: ${computer.sunkenShips.join(\n        ', '\n      )}`;\n    }\n  };\n  const findWinner = () => {\n    if (human.checkAllSunk() === true) {\n      winner = playerTwo;\n      endGame();\n      announcement.style.display = 'block';\n      announcement.innerText = `Computer wins! Play again!`;\n    } else if (computer.checkAllSunk() === true) {\n      winner = playerOne;\n      endGame();\n      announcement.style.display = 'block';\n      announcement.innerText = `You win! Play again!`;\n    }\n    return winner;\n  };\n  const endGame = () => {\n    squares.forEach((square) => {\n      square.removeEventListener('click', play);\n    });\n    resetButton.style.display = 'block';\n  };\n  //removes names and all child nodes from gameboards\n  const clearGameboards = () => {\n    boardNameOne.innerText = '';\n    boardNameTwo.innerText = '';\n    playerOneBoard.replaceChildren();\n    playerTwoBoard.replaceChildren();\n    playerOneSunken.textContent = '';\n    playerTwoSunken.textContent = '';\n  };\n  const resetGame = (e) => {\n    clearGameboards();\n    Game();\n    announcement.style.display = 'none';\n    resetButton.style.display = 'none';\n  };\n\n  squares.forEach((square) => {\n    square.addEventListener('click', play);\n  });\n  resetButton.addEventListener('click', resetGame);\n};\n\nexport default Game;\n","import Game from './game';\nimport './style.css';\n\nconst startButton = document.querySelector('.start');\nconst resetButton = document.querySelector('.reset');\nconst announcement = document.querySelector('.announcement');\n\nresetButton.style.display = 'none';\n\nconst initialize = (e) => {\n  Game();\n  announcement.style.display = 'none';\n  startButton.style.display = 'none';\n};\n\nstartButton.addEventListener('click', initialize);\n"],"sourceRoot":""}